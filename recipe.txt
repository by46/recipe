Recipe

background

由于单体式应用的诸多不足，所以催生了微服务的诞生，随着项目组以微服务实践作为主要方向的目标确定，快速开发、测试、部署微服务的能力变得十分迫切。众所周知，微服务的思想是把臃肿、巨大的单体式服务拆分为微小的，相互连接的微服务，这会导致服务的数量迅速膨胀。服务数量的增长给开发、测试都带来了巨大的压力，代码的质量也将变得难以控制，重复性工作和运维压力随之而来。由此产生了Recipe项目，提供了从项目创建、开发、文档托管、持续集成和部署的一整套解决方案，规范项目的同时，消除重复性工作，保证项目的质量。

Goal & Scope

1. 分布式Web应用托管和运行
2. 支持多种语言、多种场景
3. 支持持续集成
4. 零运维，简单易用

features

1. 文档管理实践

项目文档是相当重要但又容易被忽略的，所以简单、实用的文档编写和托管工具非常重要。Confluence是一个优秀且功能丰富的文档工具，我们认为使用它来管理项目文档不太合适，因为项目文档应该和项目代码联系更紧密，且也应该纳入代码管理，所以我们结合Archives(文档生成和托管工具)和trgit2来管理文档

2. PYPI私有仓库
由于项目组中一些常用工具库，无法发布到官方PYPI[https://pypi.python.org/pypi]仓库，所以我们自己实现了一个PYPI私有仓库，用以托管这些依赖库，同时也托管一些常用的开源依赖库。由于发布和安装依赖库变得简单，所以这会促使我们去抽取、封装更多的公共类库，不断的丰富我们的开发工具箱。

3. 简化开发流程
由于我们对于持续集成和部署技术细节的隐藏，大大的简化了开发流程，使开发人员只需要关注项目本身，从而更好，更快的完成开发任务。

4. 最佳实践收集机制
随着时间推移，每个项目组都会有某类问题的最佳实践，如何固化和复用就成为了关键。所以我们提供了一套简单、行之有效的方式来收集这些实践，并固化成项目模板，从而为更多项目组服务。

Need To be improved

1. Recipe 命令行工具更新
Recipe命令行工具作为Recipe整体的入口，发布新版本在所难免，在每次用户执行Recipe命令时，显示是否有新版本。

2. 收录项目模板太少
由于最佳实践是在不断的实践过程中累积的，所以我们会不断扩充我们的项目模板库。



